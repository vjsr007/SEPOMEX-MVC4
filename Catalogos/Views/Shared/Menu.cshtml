@using Catalogos.Models.Intranet
@using Catalogos.Models.Seguridad
@{
    var session = Session["UsuarioWeb"];

    List<spObtenerUsuarioFunciones_Result> fn = new List<spObtenerUsuarioFunciones_Result>();
    if (session!=null){
        fn.AddRange(((Catalogos.Models.Seguridad.UsuarioWeb)session).UsuarioFunciones);
    }
}
@RenderMenu(fn)
@helper RenderMenu(List<spObtenerUsuarioFunciones_Result> fn)
{
    var parent = fn.Where(fu => fu.FuncionPadreID == null && fu.TipoFuncionID==1);
    if(parent.Count()>0){  
        @:<div id="navbar" class="navbar-collapse collapse">
            @:<ul class="nav navbar-nav">
            foreach (var pa in parent)
            {
                var childs = fn.Where(p => p.FuncionPadreID == pa.FuncionID && p.TipoFuncionID==1);     
   
                if(childs.Count()>0){       
                    @:<li class="dropdown">
                    @:<a href="@Url.Content(pa.Url)" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="true">
                        @:<i class="@pa.Metadata"></i>
                        @pa.FuncionDescripcion
                    @:</a>
                    
                    @:<ul class="dropdown-menu" role="menu">
                    foreach (var c in childs)
                    {
                        @:<li>
                            @:<a href="@Url.Content(c.Url)">@c.FuncionDescripcion</a>
                        @:</li>
                    }
                    @:</ul>
                }
                else{
                    @:<li class="dropdown">
                    @:<a href="@Url.Content(pa.Url)" role="button" >
                        @:<i class="@pa.Metadata"></i>
                        @pa.FuncionDescripcion
                    @:</a>
                }
                @:</li>       
            }
            @:</ul>
        @:</div> 
    }
}