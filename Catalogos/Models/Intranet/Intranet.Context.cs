//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Catalogos.Models.Intranet
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class IntranetEntities : DbContext
    {
        public IntranetEntities()
            : base("name=IntranetEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Funcion> Funcion { get; set; }
        public DbSet<Rol> Rol { get; set; }
        public DbSet<RolFuncion> RolFuncion { get; set; }
        public DbSet<TipoFuncion> TipoFuncion { get; set; }
        public DbSet<Usuario> Usuario { get; set; }
        public DbSet<UsuarioRol> UsuarioRol { get; set; }
        public DbSet<Ciudad> Ciudad { get; set; }
        public DbSet<CodigoPostal> CodigoPostal { get; set; }
        public DbSet<Estado> Estado { get; set; }
        public DbSet<Municipio> Municipio { get; set; }
        public DbSet<Pais> Pais { get; set; }
        public DbSet<tmpUsuarios> tmpUsuarios { get; set; }
    
        public virtual ObjectResult<spCountingEntities_Result> spCountingEntities()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCountingEntities_Result>("spCountingEntities");
        }
    
        public virtual ObjectResult<spObtenerFunciones_Result> spObtenerFunciones(Nullable<int> funcionID, Nullable<int> funcionPadreID, string nombre, string descripcion, string url, Nullable<int> tipoFuncionID, Nullable<bool> activo, string tipoFuncion)
        {
            var funcionIDParameter = funcionID.HasValue ?
                new ObjectParameter("FuncionID", funcionID) :
                new ObjectParameter("FuncionID", typeof(int));
    
            var funcionPadreIDParameter = funcionPadreID.HasValue ?
                new ObjectParameter("FuncionPadreID", funcionPadreID) :
                new ObjectParameter("FuncionPadreID", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var tipoFuncionIDParameter = tipoFuncionID.HasValue ?
                new ObjectParameter("TipoFuncionID", tipoFuncionID) :
                new ObjectParameter("TipoFuncionID", typeof(int));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var tipoFuncionParameter = tipoFuncion != null ?
                new ObjectParameter("TipoFuncion", tipoFuncion) :
                new ObjectParameter("TipoFuncion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerFunciones_Result>("spObtenerFunciones", funcionIDParameter, funcionPadreIDParameter, nombreParameter, descripcionParameter, urlParameter, tipoFuncionIDParameter, activoParameter, tipoFuncionParameter);
        }
    
        public virtual ObjectResult<spObtenerRoles_Result> spObtenerRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerRoles_Result>("spObtenerRoles");
        }
    
        public virtual ObjectResult<spObtenerRolFunciones_Result> spObtenerRolFunciones(Nullable<int> rolID, string rol, Nullable<bool> rolActivo, Nullable<int> funcionID, Nullable<int> funcionPadreID, string funcion, string funcionDescripcion, string url, Nullable<int> tipoFuncionID, Nullable<bool> funcionActivo, string tipoFuncion)
        {
            var rolIDParameter = rolID.HasValue ?
                new ObjectParameter("RolID", rolID) :
                new ObjectParameter("RolID", typeof(int));
    
            var rolParameter = rol != null ?
                new ObjectParameter("Rol", rol) :
                new ObjectParameter("Rol", typeof(string));
    
            var rolActivoParameter = rolActivo.HasValue ?
                new ObjectParameter("RolActivo", rolActivo) :
                new ObjectParameter("RolActivo", typeof(bool));
    
            var funcionIDParameter = funcionID.HasValue ?
                new ObjectParameter("FuncionID", funcionID) :
                new ObjectParameter("FuncionID", typeof(int));
    
            var funcionPadreIDParameter = funcionPadreID.HasValue ?
                new ObjectParameter("FuncionPadreID", funcionPadreID) :
                new ObjectParameter("FuncionPadreID", typeof(int));
    
            var funcionParameter = funcion != null ?
                new ObjectParameter("Funcion", funcion) :
                new ObjectParameter("Funcion", typeof(string));
    
            var funcionDescripcionParameter = funcionDescripcion != null ?
                new ObjectParameter("FuncionDescripcion", funcionDescripcion) :
                new ObjectParameter("FuncionDescripcion", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var tipoFuncionIDParameter = tipoFuncionID.HasValue ?
                new ObjectParameter("TipoFuncionID", tipoFuncionID) :
                new ObjectParameter("TipoFuncionID", typeof(int));
    
            var funcionActivoParameter = funcionActivo.HasValue ?
                new ObjectParameter("FuncionActivo", funcionActivo) :
                new ObjectParameter("FuncionActivo", typeof(bool));
    
            var tipoFuncionParameter = tipoFuncion != null ?
                new ObjectParameter("TipoFuncion", tipoFuncion) :
                new ObjectParameter("TipoFuncion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerRolFunciones_Result>("spObtenerRolFunciones", rolIDParameter, rolParameter, rolActivoParameter, funcionIDParameter, funcionPadreIDParameter, funcionParameter, funcionDescripcionParameter, urlParameter, tipoFuncionIDParameter, funcionActivoParameter, tipoFuncionParameter);
        }
    
        public virtual ObjectResult<spObtenerUsuario_Result> spObtenerUsuario(string nombre, string pass)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerUsuario_Result>("spObtenerUsuario", nombreParameter, passParameter);
        }
    
        public virtual ObjectResult<spObtenerCiudades_Result> spObtenerCiudades(Nullable<int> ciudadID, Nullable<int> municipioID, string nombre, Nullable<int> estadoID, Nullable<bool> activo, Nullable<int> paisID)
        {
            var ciudadIDParameter = ciudadID.HasValue ?
                new ObjectParameter("CiudadID", ciudadID) :
                new ObjectParameter("CiudadID", typeof(int));
    
            var municipioIDParameter = municipioID.HasValue ?
                new ObjectParameter("MunicipioID", municipioID) :
                new ObjectParameter("MunicipioID", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var estadoIDParameter = estadoID.HasValue ?
                new ObjectParameter("EstadoID", estadoID) :
                new ObjectParameter("EstadoID", typeof(int));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var paisIDParameter = paisID.HasValue ?
                new ObjectParameter("PaisID", paisID) :
                new ObjectParameter("PaisID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerCiudades_Result>("spObtenerCiudades", ciudadIDParameter, municipioIDParameter, nombreParameter, estadoIDParameter, activoParameter, paisIDParameter);
        }
    
        public virtual ObjectResult<spObtenerCodigosPostales_Result> spObtenerCodigosPostales(string codigoPostal, string tipoAsentamiento, string asentamiento, string zona, Nullable<int> municipioID, Nullable<int> ciudadId, Nullable<int> estadoID, Nullable<bool> activo, Nullable<int> paisID)
        {
            var codigoPostalParameter = codigoPostal != null ?
                new ObjectParameter("CodigoPostal", codigoPostal) :
                new ObjectParameter("CodigoPostal", typeof(string));
    
            var tipoAsentamientoParameter = tipoAsentamiento != null ?
                new ObjectParameter("TipoAsentamiento", tipoAsentamiento) :
                new ObjectParameter("TipoAsentamiento", typeof(string));
    
            var asentamientoParameter = asentamiento != null ?
                new ObjectParameter("Asentamiento", asentamiento) :
                new ObjectParameter("Asentamiento", typeof(string));
    
            var zonaParameter = zona != null ?
                new ObjectParameter("Zona", zona) :
                new ObjectParameter("Zona", typeof(string));
    
            var municipioIDParameter = municipioID.HasValue ?
                new ObjectParameter("MunicipioID", municipioID) :
                new ObjectParameter("MunicipioID", typeof(int));
    
            var ciudadIdParameter = ciudadId.HasValue ?
                new ObjectParameter("CiudadId", ciudadId) :
                new ObjectParameter("CiudadId", typeof(int));
    
            var estadoIDParameter = estadoID.HasValue ?
                new ObjectParameter("EstadoID", estadoID) :
                new ObjectParameter("EstadoID", typeof(int));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var paisIDParameter = paisID.HasValue ?
                new ObjectParameter("PaisID", paisID) :
                new ObjectParameter("PaisID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerCodigosPostales_Result>("spObtenerCodigosPostales", codigoPostalParameter, tipoAsentamientoParameter, asentamientoParameter, zonaParameter, municipioIDParameter, ciudadIdParameter, estadoIDParameter, activoParameter, paisIDParameter);
        }
    
        public virtual ObjectResult<spObtenerEstados_Result> spObtenerEstados(Nullable<int> estadoID, string codigo, string nombre, Nullable<int> paisID, Nullable<bool> activo)
        {
            var estadoIDParameter = estadoID.HasValue ?
                new ObjectParameter("EstadoID", estadoID) :
                new ObjectParameter("EstadoID", typeof(int));
    
            var codigoParameter = codigo != null ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var paisIDParameter = paisID.HasValue ?
                new ObjectParameter("PaisID", paisID) :
                new ObjectParameter("PaisID", typeof(int));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerEstados_Result>("spObtenerEstados", estadoIDParameter, codigoParameter, nombreParameter, paisIDParameter, activoParameter);
        }
    
        public virtual ObjectResult<spObtenerMunicipios_Result> spObtenerMunicipios(Nullable<int> municipioID, string codigo, string nombre, Nullable<int> estadoID, Nullable<bool> activo, Nullable<int> paisID)
        {
            var municipioIDParameter = municipioID.HasValue ?
                new ObjectParameter("MunicipioID", municipioID) :
                new ObjectParameter("MunicipioID", typeof(int));
    
            var codigoParameter = codigo != null ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var estadoIDParameter = estadoID.HasValue ?
                new ObjectParameter("EstadoID", estadoID) :
                new ObjectParameter("EstadoID", typeof(int));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var paisIDParameter = paisID.HasValue ?
                new ObjectParameter("PaisID", paisID) :
                new ObjectParameter("PaisID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerMunicipios_Result>("spObtenerMunicipios", municipioIDParameter, codigoParameter, nombreParameter, estadoIDParameter, activoParameter, paisIDParameter);
        }
    
        public virtual ObjectResult<spObtenerPaises_Result> spObtenerPaises(Nullable<bool> activo, string nombre, string codigo, Nullable<int> paisID)
        {
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var codigoParameter = codigo != null ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(string));
    
            var paisIDParameter = paisID.HasValue ?
                new ObjectParameter("PaisID", paisID) :
                new ObjectParameter("PaisID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerPaises_Result>("spObtenerPaises", activoParameter, nombreParameter, codigoParameter, paisIDParameter);
        }
    
        public virtual int spEditarPais(Nullable<int> paisID, string nombre, string codigo, string moneda, string codMoneda, Nullable<int> usuarioID, Nullable<bool> activo)
        {
            var paisIDParameter = paisID.HasValue ?
                new ObjectParameter("PaisID", paisID) :
                new ObjectParameter("PaisID", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var codigoParameter = codigo != null ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(string));
    
            var monedaParameter = moneda != null ?
                new ObjectParameter("Moneda", moneda) :
                new ObjectParameter("Moneda", typeof(string));
    
            var codMonedaParameter = codMoneda != null ?
                new ObjectParameter("CodMoneda", codMoneda) :
                new ObjectParameter("CodMoneda", typeof(string));
    
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEditarPais", paisIDParameter, nombreParameter, codigoParameter, monedaParameter, codMonedaParameter, usuarioIDParameter, activoParameter);
        }
    
        public virtual int spAgregarCiudades(Nullable<int> municipioID, string nombre, Nullable<int> estadoID, Nullable<bool> activo, Nullable<int> usuarioID)
        {
            var municipioIDParameter = municipioID.HasValue ?
                new ObjectParameter("MunicipioID", municipioID) :
                new ObjectParameter("MunicipioID", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var estadoIDParameter = estadoID.HasValue ?
                new ObjectParameter("EstadoID", estadoID) :
                new ObjectParameter("EstadoID", typeof(int));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAgregarCiudades", municipioIDParameter, nombreParameter, estadoIDParameter, activoParameter, usuarioIDParameter);
        }
    
        public virtual int spAgregarCodigosPostales(string codigoPostal, string tipoAsentamiento, string asentamiento, string zona, Nullable<int> municipioID, Nullable<int> ciudadId, Nullable<bool> activo, Nullable<int> usuarioID)
        {
            var codigoPostalParameter = codigoPostal != null ?
                new ObjectParameter("CodigoPostal", codigoPostal) :
                new ObjectParameter("CodigoPostal", typeof(string));
    
            var tipoAsentamientoParameter = tipoAsentamiento != null ?
                new ObjectParameter("TipoAsentamiento", tipoAsentamiento) :
                new ObjectParameter("TipoAsentamiento", typeof(string));
    
            var asentamientoParameter = asentamiento != null ?
                new ObjectParameter("Asentamiento", asentamiento) :
                new ObjectParameter("Asentamiento", typeof(string));
    
            var zonaParameter = zona != null ?
                new ObjectParameter("Zona", zona) :
                new ObjectParameter("Zona", typeof(string));
    
            var municipioIDParameter = municipioID.HasValue ?
                new ObjectParameter("MunicipioID", municipioID) :
                new ObjectParameter("MunicipioID", typeof(int));
    
            var ciudadIdParameter = ciudadId.HasValue ?
                new ObjectParameter("CiudadId", ciudadId) :
                new ObjectParameter("CiudadId", typeof(int));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAgregarCodigosPostales", codigoPostalParameter, tipoAsentamientoParameter, asentamientoParameter, zonaParameter, municipioIDParameter, ciudadIdParameter, activoParameter, usuarioIDParameter);
        }
    
        public virtual int spAgregarEstados(string codigo, string nombre, Nullable<int> paisID, Nullable<int> usuarioID, Nullable<bool> activo)
        {
            var codigoParameter = codigo != null ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var paisIDParameter = paisID.HasValue ?
                new ObjectParameter("PaisID", paisID) :
                new ObjectParameter("PaisID", typeof(int));
    
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAgregarEstados", codigoParameter, nombreParameter, paisIDParameter, usuarioIDParameter, activoParameter);
        }
    
        public virtual int spAgregarMunicipios(string codigo, string nombre, Nullable<int> estadoID, Nullable<bool> activo, Nullable<int> usuarioID)
        {
            var codigoParameter = codigo != null ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var estadoIDParameter = estadoID.HasValue ?
                new ObjectParameter("EstadoID", estadoID) :
                new ObjectParameter("EstadoID", typeof(int));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAgregarMunicipios", codigoParameter, nombreParameter, estadoIDParameter, activoParameter, usuarioIDParameter);
        }
    
        public virtual int spAgregarPais(string nombre, string codigo, string moneda, string codMoneda, Nullable<int> usuarioID)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var codigoParameter = codigo != null ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(string));
    
            var monedaParameter = moneda != null ?
                new ObjectParameter("Moneda", moneda) :
                new ObjectParameter("Moneda", typeof(string));
    
            var codMonedaParameter = codMoneda != null ?
                new ObjectParameter("CodMoneda", codMoneda) :
                new ObjectParameter("CodMoneda", typeof(string));
    
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAgregarPais", nombreParameter, codigoParameter, monedaParameter, codMonedaParameter, usuarioIDParameter);
        }
    
        public virtual int spEditarCiudades(Nullable<int> ciudadID, Nullable<int> municipioID, string nombre, Nullable<int> estadoID, Nullable<bool> activo, Nullable<int> usuarioID)
        {
            var ciudadIDParameter = ciudadID.HasValue ?
                new ObjectParameter("CiudadID", ciudadID) :
                new ObjectParameter("CiudadID", typeof(int));
    
            var municipioIDParameter = municipioID.HasValue ?
                new ObjectParameter("MunicipioID", municipioID) :
                new ObjectParameter("MunicipioID", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var estadoIDParameter = estadoID.HasValue ?
                new ObjectParameter("EstadoID", estadoID) :
                new ObjectParameter("EstadoID", typeof(int));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEditarCiudades", ciudadIDParameter, municipioIDParameter, nombreParameter, estadoIDParameter, activoParameter, usuarioIDParameter);
        }
    
        public virtual int spEditarCodigosPostales(Nullable<int> codigoPostalID, string codigoPostal, string tipoAsentamiento, string asentamiento, string zona, Nullable<int> municipioID, Nullable<int> ciudadId, Nullable<bool> activo, Nullable<int> usuarioID)
        {
            var codigoPostalIDParameter = codigoPostalID.HasValue ?
                new ObjectParameter("CodigoPostalID", codigoPostalID) :
                new ObjectParameter("CodigoPostalID", typeof(int));
    
            var codigoPostalParameter = codigoPostal != null ?
                new ObjectParameter("CodigoPostal", codigoPostal) :
                new ObjectParameter("CodigoPostal", typeof(string));
    
            var tipoAsentamientoParameter = tipoAsentamiento != null ?
                new ObjectParameter("TipoAsentamiento", tipoAsentamiento) :
                new ObjectParameter("TipoAsentamiento", typeof(string));
    
            var asentamientoParameter = asentamiento != null ?
                new ObjectParameter("Asentamiento", asentamiento) :
                new ObjectParameter("Asentamiento", typeof(string));
    
            var zonaParameter = zona != null ?
                new ObjectParameter("Zona", zona) :
                new ObjectParameter("Zona", typeof(string));
    
            var municipioIDParameter = municipioID.HasValue ?
                new ObjectParameter("MunicipioID", municipioID) :
                new ObjectParameter("MunicipioID", typeof(int));
    
            var ciudadIdParameter = ciudadId.HasValue ?
                new ObjectParameter("CiudadId", ciudadId) :
                new ObjectParameter("CiudadId", typeof(int));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEditarCodigosPostales", codigoPostalIDParameter, codigoPostalParameter, tipoAsentamientoParameter, asentamientoParameter, zonaParameter, municipioIDParameter, ciudadIdParameter, activoParameter, usuarioIDParameter);
        }
    
        public virtual int spEditarEstados(Nullable<int> estadoID, string codigo, string nombre, Nullable<int> paisID, Nullable<int> usuarioID, Nullable<bool> activo)
        {
            var estadoIDParameter = estadoID.HasValue ?
                new ObjectParameter("EstadoID", estadoID) :
                new ObjectParameter("EstadoID", typeof(int));
    
            var codigoParameter = codigo != null ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var paisIDParameter = paisID.HasValue ?
                new ObjectParameter("PaisID", paisID) :
                new ObjectParameter("PaisID", typeof(int));
    
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEditarEstados", estadoIDParameter, codigoParameter, nombreParameter, paisIDParameter, usuarioIDParameter, activoParameter);
        }
    
        public virtual int spEditarMunicipios(Nullable<int> municipioID, string codigo, string nombre, Nullable<int> estadoID, Nullable<bool> activo, Nullable<int> usuarioID)
        {
            var municipioIDParameter = municipioID.HasValue ?
                new ObjectParameter("MunicipioID", municipioID) :
                new ObjectParameter("MunicipioID", typeof(int));
    
            var codigoParameter = codigo != null ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var estadoIDParameter = estadoID.HasValue ?
                new ObjectParameter("EstadoID", estadoID) :
                new ObjectParameter("EstadoID", typeof(int));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEditarMunicipios", municipioIDParameter, codigoParameter, nombreParameter, estadoIDParameter, activoParameter, usuarioIDParameter);
        }
    
        public virtual ObjectResult<spObtenerUsuarioFunciones_Result> spObtenerUsuarioFunciones(Nullable<int> usuarioID, string nombre, Nullable<int> rolID, Nullable<bool> rolActivo, Nullable<bool> activo, Nullable<bool> funcionActivo)
        {
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var rolIDParameter = rolID.HasValue ?
                new ObjectParameter("RolID", rolID) :
                new ObjectParameter("RolID", typeof(int));
    
            var rolActivoParameter = rolActivo.HasValue ?
                new ObjectParameter("RolActivo", rolActivo) :
                new ObjectParameter("RolActivo", typeof(bool));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var funcionActivoParameter = funcionActivo.HasValue ?
                new ObjectParameter("FuncionActivo", funcionActivo) :
                new ObjectParameter("FuncionActivo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerUsuarioFunciones_Result>("spObtenerUsuarioFunciones", usuarioIDParameter, nombreParameter, rolIDParameter, rolActivoParameter, activoParameter, funcionActivoParameter);
        }
    }
}
